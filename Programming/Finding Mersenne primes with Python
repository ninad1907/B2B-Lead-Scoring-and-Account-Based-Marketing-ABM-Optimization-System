1. 
Write the function is_mersenne to identify if a prime is a Mersenne prime

Write the function is_mersenne that receives a single prime number p and returns True if it is a Mersenne prime, or False otherwise.

=> def is_mersenne(p):
    for i in range(1, p):
        result = 2 ** i - 1
        if result == p:
            return True
        if result > p:
            return False


2. Find all Mersenne primes

Now it's time to find which of the prime numbers in the primes variable are indeed Mersenne primes. Find all Mersenne primes and store them in the variable mersenne_primes. Your list will contain the elements [3, 7, 31, 127, ...].

=> mersenne_primes = []
for p in primes:
    if is_mersenne(p):
        mersenne_primes.append(p)


3. Create the list mersenne_numbers

Create a list of Mersenne numbers from 1 up to the one that is larger than the largest prime in the list of primes. That is, suppose our list of primes contained the first 12 primes: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]

You should start calculating all integers starting from 1

1 = (2^1) - 1 = 1
2 = (2^2) - 1 = 3
3 = (2^3) - 1 = 7
4 = (2^4) - 1 = 15
5 = (2^5) - 1 = 31
6 = (2^6) - 1 = 63  <<<< 63 is LARGER than the largest prime in our list, which is 37. This is NOT included.

=> largest_prime = primes[-1]
mersenne_numbers = []
i = 1
while True:
    result = 2 ** i - 1
    if result > largest_prime:
        break
    mersenne_numbers.append(result)
    i += 1


4. 
Even more efficient, turn mersenne_numbers into a set

We'll use the list mersenne_numbers to check which numbers in primes are Mersenne numbers. So, the ultimate efficient gain will be to turn mersenne_numbers into a set, as the operations of membership in sets are O(1).

Transform the variable mersenne_numbers into a set containing the same elements.

=> mersenne_numbers = set(mersenne_numbers)


5. Find Mersenne primes using mersenne_numbers

Now, create a new variable efficient_mersenne_primes that contains all the mersenne numbers (same as before), but this time, check if the prime is a mersenne using the set mersenne_numbers created in the previous activity.

=> efficient_mersenne_primes = [p for p in primes if p in mersenne_numbers]
